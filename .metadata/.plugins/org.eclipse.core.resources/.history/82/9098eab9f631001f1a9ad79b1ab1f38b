package com.profileservice.app.controller;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.profileservice.app.security.JwtTokenFilter;
import com.profileservice.app.service.ProfileService;

import jakarta.validation.Valid;

import com.profileservice.app.entity.UserProfile;
import com.profileservice.app.security.JwtRequest;
import com.profileservice.app.security.JwtResponse;



@RestController
@RequestMapping("/profiles")
public class AuthController {
	
//	@Autowired
//    private UserDetailsService userDetailsService;
//
//    @Autowired
//    private AuthenticationManager manager;
//
//
//    @Autowired
//    private JwtTokenFilter helper;

	@Autowired
	private ProfileService profileService;
   // private Logger logger = LoggerFactory.getLogger(AuthController.class);
    
    @PostMapping("/login")
    public ResponseEntity<JwtResponse> login(@RequestBody JwtRequest request) {

//        this.doAuthenticate(request.getEmail(), request.getPassword());
//
//
//        UserDetails userDetails = userDetailsService.loadUserByUsername(request.getEmail());
//        String token = this.helper.generateToken(userDetails);
//
//        JwtResponse response = JwtResponse.builder()
//                .jwtToken(token)
//                .username(userDetails.getUsername()).build();
//        return new ResponseEntity<>(response, HttpStatus.OK);
    	return profileService.login(request);
    }
    @PostMapping("register")
    public ResponseEntity<String> createProfile(@Valid @RequestBody UserProfile profile) {
    
    		UserProfile user= profileService.createProfile(profile).getBody();
		
       return new ResponseEntity<>( "User Added Successfully with User ID: "+user.getProfileId(),HttpStatus.OK);
    }

//    private void doAuthenticate(String email, String password) {
//
//        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(email, password);
//        try {
//            manager.authenticate(authentication);
//
//
//        } catch (BadCredentialsException e) {
//            throw new BadCredentialsException(" Invalid Username or Password  !!");
//        }
//
//    }
    @PutMapping("/{profileId}")
    public ResponseEntity<String> updateProfile(@PathVariable int profileId,@Valid @RequestBody UserProfile profile) {
         profileService.updateProfile(profileId, profile);
        return new ResponseEntity<>( "User Updated Successfully",HttpStatus.OK);
    }

    @ExceptionHandler(BadCredentialsException.class)
    public String exceptionHandler() {
        return "Credentials Invalid !!";
    }
}
